name: Acebook CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  buildAndTest:
    runs-on: ubuntu-latest

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
        
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Cache Node.js modules
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm install
        
      - name: Build the project
        run: npm run build --if-present

      - name: Start MongoDB
        uses: supercharge/mongodb-github-action@1.11.0
        with:
          mongodb-version: '7.0'
      
      - name: Start the test server and wait for it
        run: |
          npm run start:test &
          npx wait-on http://localhost:3030
      
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        
      - name: Run end-to-end tests
        run: npm run test

  deploy:
    name: CD Pipeline
    runs-on: ubuntu-latest
    needs: buildAndTest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        node-version: ['22.x']
        appname: ['acebook-node-amss']
        deploy-group: ['production']
        s3-bucket: ['acebook-adss-bucket']
        s3-filename: ['staging-aws-codedeploy-${{ github.sha }}']

    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Build the project
        run: npm run build --if-present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.MYAWSACCESS_KEY}}
          aws-secret-access-key: ${{ secrets.MYAWSSECRET_KEY}}
          aws-region: eu-west-2

      - name: AWS Deploy push
        run: |
          aws deploy push \
          --application-name ${{ matrix.appname }} \
          --description "This is a revision for the ${{ matrix.appname }}-${{ github.sha }}" \
          --ignore-hidden-files \
          --s3-location s3://${{ matrix.s3-bucket }}/${{ matrix.s3-filename }}.zip \
          --source .

      - name: AWS Create Deployment
        run: |
          aws deploy create-deployment \
           --application-name ${{ matrix.appname }} \
           --deployment-config-name CodeDeployDefault.OneAtATime \
           --deployment-group-name ${{ matrix.deploy-group }} \
           --file-exists-behavior OVERWRITE \
           --s3-location bucket=${{ matrix.s3-bucket }},key=${{ matrix.s3-filename }}.zip,bundleType=zip
